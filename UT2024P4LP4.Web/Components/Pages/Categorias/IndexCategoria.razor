@rendermode InteractiveServer
@attribute [StreamRendering]
@page "/categorias"
@* @using Microsoft.AspNet *@

<h3>Categorias</h3>

@if (ShowForm)
{
    <div class="card">
        <h5 class="card-header">@Accion categoria</h5>
        <div class="card-body">
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input @bind-value="MiCategoria.Nombre" type="text" class="form-control" id="nombre" placeholder="Nombre" disabled="@DisableInputs">
            </div>
            
            <span class="btn btn-primary" @onclick="Aceptar">@Accion</span>
            <span class="btn btn-danger" @onclick="btnCancelar">Cancelar</span>
        </div>
    </div>
}
else
{
    
    <div class="card mb-3 mt-3">
        <div class="card-header">
            <span class="btn btn-success" @onclick="btnRegistrar">+</span>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Categorias.Count > 0)
                    {
                        @foreach (var p in Categorias)
                        {
                            <tr>
                            <th scope="row">@p.Id</th>
                                <td>@p.Nombre</td>
                                <td>
                                    <div role="group" aria-label="Basic mixed styles example">
                                        <span @onclick="()=>btnEditar(p)" class="btn btn-outline-warning">Editar</span>
                                        <span @onclick="()=>btnEliminar(p)" class="btn btn-outline-danger">Eliminar</span>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else { <p> No categories </p> }
                </tbody>
            </table>
        </div>
    </div>
}

@code {

    public List<CategoriaDto> Categorias { get; set; } = new();
    public string Accion { get; set; } = "Registrar";
    public CategoriaRequest MiCategoria { get; set; } = new(); 

    public bool ShowForm = false, DisableInputs = false;

    protected override async Task OnInitializedAsync()
    {
        await this.Consultar();
    }

    public void btnRegistrar()
    {
        Accion = Constants.Acciones.Registrar;
        ShowForm = true;
        StateHasChanged();
        DisableInputs = false;
        MiCategoria = new();
    }
    public void btnEditar(CategoriaDto dto)
    {
        Accion = Constants.Acciones.Modificar;
        ShowForm = true;
        DisableInputs = false;
        MiCategoria = dto.ToRequest();
        StateHasChanged();
    }
    public void btnEliminar(CategoriaDto dto)
    {
        Accion = Constants.Acciones.Eliminar;
        ShowForm = true;
        DisableInputs = true;
        MiCategoria = dto.ToRequest();
        StateHasChanged();
    }
    public void btnCancelar()
    {
        ShowForm = false;
        MiCategoria = new();
        DisableInputs = true;

    }

    public async Task Consultar()
    {
        var result = await categoriaService.GetAll();
        if (result.Succesd)
        {
            Categorias =
            result.Data?.ToList()
            ??
            new();
        }
    }
    public async Task Aceptar()
    {
        Result r =
        Accion == Constants.Acciones.Registrar ? await categoriaService.Create(MiCategoria) :
        Accion == Constants.Acciones.Modificar ? await categoriaService.Update(MiCategoria) :
        Accion == Constants.Acciones.Eliminar ? await categoriaService.Delete(MiCategoria.Id) :
        Result.Failure("Accion no soportada");
        if (r.Succesd)
        {
            await Consultar();
            btnCancelar();
        }
    }
}
